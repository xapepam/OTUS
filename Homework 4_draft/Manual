1. При необходимости создаем кластер (или удаялем и создаем):
    kind delete cluster --name xapecluster
    kind create cluster --name xapecluster --config=kind/config.yaml

2. Ставим Ingress
    kubectl apply -f ingress-controller/deploy.yaml

3. Ставим Prometheus:
    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
    helm repo add stable https://charts.helm.sh/stable
    helm repo update
    kubectl apply -f k8s/namespace.yaml -f k8s/grafana.yaml
    helm install prom prometheus-community/kube-prometheus-stack -f prometheus/prometheus.yaml --atomic -n monitoring

4. Создать неймспейсы для операторов:
    kubectl apply -f namespaces.yaml (взять из форка otus-homework)

5.  Разворачиваем Jaeger
Jaeger - решение трассировки. Компоненты Istio, такие как: sidecar-контейнер, gateway, отправляют данные запросов в систему. 
Таким образом получается полная трассировка запроса.

    helm repo add jaegertracing https://jaegertracing.github.io/helm-charts
    helm repo update

    Установливаем оператор, разворачивающий Jaeger:
    helm install --version "2.19.0" -n jaeger-operator -f jaeger/operator-values.yaml \
    jaeger-operator jaegertracing/jaeger-operator

6. Установить оператор, разворачивающий Istio:
    curl -L https://istio.io/downloadIstio | sh -
    cd istio-1.9.4
    sudo mv bin/istioctl /usr/local/bin/istioctl
    istioctl operator init --watchedNamespaces istio-system --operatorNamespace istio-operator
    
    Развернуть Istio c помощью оператора:
    kubectl apply -f istio/istio.yaml
    
    Проверить состояние Istio:
    kubectl get all -n istio-system -l istio.io/rev=default